<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/org/opensuse/Agama/Storage1">
  <node name="ISCSI" />
  <node name="iscsi_nodes" />
  <node name="staging" />
  <node name="system" />
  <node name="zfcp_controllers" />
  <node name="zfcp_disks" />
  <interface name="org.opensuse.Agama.Storage1">
    <method name="Probe">
    </method>
    <!--
      Probes the system and recalculates the proposal using the current config.
    -->
    <method name="Reprobe">
    </method>
    <!--
      Similar to Reprobe, but resetting the previous activation (e.g., provided LUKS passwords).
    -->
    <method name="Reactivate">
    </method>
    <!--
      Sets the storage config.
    -->
    <method name="SetConfig">
      <!--
        E.g.,
        {
          "storage": {
            "drives": [
              {
                "search": "/dev/vda",
                "partitions": [
                  { "generate": "default" }
                ]
              }
            ]
          }
        }
      -->
      <arg name="serialized_config" direction="in" type="s"/>
      <!--
        Whether the proposal was correctly calculated:
          0: success
          1: failure
      -->
      <arg name="result" direction="out" type="u"/>
    </method>
    <!--
      Resets the default storage config defined by the selected product.
    -->
    <method name="ResetConfig">
      <!--
        Whether the proposal was correctly calculated:
          0: success
          1: failure
      -->
      <arg name="result" direction="out" type="u"/>
    </method>
    <!--
      Gets the unsolved storage config.
    -->
    <method name="GetConfig">
      <!--
        E.g.,
        {
          "storage": {
            "drives": [
              {
                "search": "/dev/vda",
                "partitions": [
                  { "generate": "default" }
                ]
              }
            ]
          }
        }
      -->
      <arg name="serialized_config" direction="out" type="s"/>
    </method>
    <!--
      Sets the storage config model.
    -->
    <method name="SetConfigModel">
      <!--
        E.g.,
        {
          "drives": [
            {
              "name": "/dev/vda",
              "partitions": [
                { "mountPath": "/" }
              ]
            }
          ]
        }
      -->
      <arg name="serialized_model" direction="in" type="s"/>
      <!--
        Whether the proposal was correctly calculated with the given config model:
          0: success
          1: failure
      -->
      <arg name="result" direction="out" type="u"/>
    </method>
    <!--
      Gets the storage config model.
    -->
    <method name="GetConfigModel">
      <!--
        E.g.,
        {
          "drives": [
            {
              "name": "/dev/vda",
              "spacePolicy": "keep",
              "partitions": [
                {
                  "mountPath": "/",
                  "filesystem": {
                    "default": true,
                    "type": "xfs"
                  },
                  "size": {
                    "default": true,
                    "min": "10 GiB",
                    "max": "10 GiB"
                  }
                }
              ]
            }
          ]
        }
      -->
      <arg name="serialized_model" direction="out" type="s"/>
    </method>
    <!--
      Solves the given storage config model.
    -->
    <method name="SolveConfigModel">
      <!--
        E.g.,
        {
          "drives": [
            {
              "name": "/dev/vda",
              "partitions": [
                {
                  "mountPath": "/"
                }
              ]
            }
          ]
        }
      -->
      <arg name="sparse_model" direction="in" type="s"/>
      <!--
        E.g.,
        {
          "drives": [
            {
              "name": "/dev/vda",
              "spacePolicy": "keep",
              "partitions": [
                {
                  "mountPath": "/",
                  "filesystem": {
                    "default": true,
                    "type": "xfs"
                  },
                  "size": {
                    "default": true,
                    "min": "10 GiB",
                    "max": "10 GiB"
                  }
                }
              ]
            }
          ]
        }
      -->
      <arg name="solved_model" direction="out" type="s"/>
    </method>
    <method name="Install">
    </method>
    <method name="Finish">
    </method>
    <!--
      Whether the system is in a deprecated status.

      The system is usually set as deprecated as effect of managing some kind of devices, for
      example, when iSCSI sessions are created or when a zFCP disk is activated.

      A deprecated system means that the probed system could not match with the current system.

      It is expected that clients probe devices again if the system is deprecated.
    -->
    <property type="b" name="DeprecatedSystem" access="read"/>
  </interface>
</node>
