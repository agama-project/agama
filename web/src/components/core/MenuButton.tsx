/*
 * Copyright (c) [2025] SUSE LLC
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact SUSE LLC.
 *
 * To contact SUSE LLC about this file by physical or electronic mail, you may
 * find current contact information at www.suse.com.
 */

import React, { useId, useMemo, useRef, useState } from "react";
import {
  MenuToggle,
  DrilldownMenu,
  MenuContent,
  Divider,
  MenuContainer,
  Menu,
  MenuList,
  MenuItem,
  MenuPopperProps,
  MenuItemProps,
  MenuToggleProps,
} from "@patternfly/react-core";
import { _ } from "~/i18n";
import { useLocation, useNavigate } from "react-router-dom";

/**
 * PatternFly Menu crashes with ids generated by useId.
 *
 * Note that useId is actually generating an identifier that is a valid HTML id attribute but not a
 * valid CSS identifier. Unfortunately, the PatternFly component is querying the node by using the
 * querySelector JavaScript method without escaping the id (e.g., by using CSS.escape).
 */
function useMenuId() {
  const id = useId();
  const menuId = useMemo(() => id.replaceAll(":", ""), [id]);
  return menuId;
}

interface MenuButtonItemProps extends Omit<MenuItemProps, "direction" | "drilldownMenu"> {
  items?: React.ReactNode[];
  keepQuery?: boolean;
  upProps?: { label?: string };
}

export type CustomToggleProps = {
  onClick?: () => void;
  isExpanded?: boolean;
};

export type MenuButtonProps = {
  items?: React.ReactNode[];
  menuProps?: {
    ["aria-label"]?: string;
    ["aria-labelledby"]?: string;
    closeOnClick?: boolean;
    popperProps?: MenuPopperProps;
  };
  customToggle?: React.ReactElement<CustomToggleProps>;
  toggleProps?: MenuToggleProps;
};

export function MenuButtonItem({
  items = [],
  upProps = { label: _("Back") },
  onClick,
  children,
  to,
  keepQuery,
  ...props
}: React.PropsWithChildren<MenuButtonItemProps>): React.ReactNode {
  const itemId = useId();
  const menuId = useMenuId();
  const navigate = useNavigate();
  const location = useLocation();

  const onDownClick = (event) => {
    event.stopPropagation();
    onClick && onClick(event);
  };

  if (!items.length) {
    return (
      <MenuItem
        itemId={itemId}
        onClick={() => {
          onClick && onClick();
          to && navigate({ pathname: to, search: keepQuery ? location.search : "" });
        }}
        {...props}
      >
        {children}
      </MenuItem>
    );
  }
  return (
    <MenuItem
      itemId={itemId}
      {...props}
      onClick={onDownClick}
      direction="down"
      drilldownMenu={
        <DrilldownMenu id={menuId}>
          <MenuItem direction="up" onClick={(e) => e.stopPropagation()}>
            {upProps.label}
          </MenuItem>
          <Divider />
          {items}
        </DrilldownMenu>
      }
    >
      {children}
    </MenuItem>
  );
}

export default function MenuButton({
  items = [],
  menuProps = {},
  toggleProps = {},
  customToggle,
  children,
}: React.PropsWithChildren<MenuButtonProps>): React.ReactNode {
  const menuRef = useRef();
  const toggleRef = useRef();
  const rootId = useMenuId();
  const [isOpen, setIsOpen] = useState(false);
  const [menuDrilledIn, setMenuDrilledIn] = React.useState<string[]>([]);
  const [drilldownPath, setDrilldownPath] = React.useState<string[]>([]);
  const [activeMenu, setActiveMenu] = React.useState<string>(rootId);
  const [activeItemId, setActiveItemId] = React.useState("");
  const [menuHeights, setMenuHeights] = React.useState({});

  menuProps = { popperProps: {}, closeOnClick: true, ...menuProps };

  const resetState = () => {
    setMenuDrilledIn([]);
    setDrilldownPath([]);
    setActiveMenu(rootId);
    // Reset the height of the root menu. Otherwise, the memorized height could be wrong if the
    // items of the root menu change.
    if (!isOpen) setMenuHeights({ ...menuHeights, [rootId]: undefined });
  };

  const onOpenChange = (nextState) => {
    setIsOpen(nextState);
  };

  const toggle = () => {
    resetState();
    setIsOpen(!isOpen);
  };

  const drillIn = (
    _: React.KeyboardEvent | React.MouseEvent,
    fromMenuId: string,
    toMenuId: string,
    pathId: string,
  ) => {
    setMenuDrilledIn([...menuDrilledIn, fromMenuId]);
    setDrilldownPath([...drilldownPath, pathId]);
    setActiveMenu(toMenuId);
    setActiveItemId(pathId);
  };

  const drillOut = (_: React.KeyboardEvent | React.MouseEvent, toMenuId: string) => {
    const menuDrilledInSansLast = menuDrilledIn.slice(0, menuDrilledIn.length - 1);
    const pathSansLast = drilldownPath.slice(0, drilldownPath.length - 1);
    const lastPath = [...pathSansLast].pop();
    setMenuDrilledIn(menuDrilledInSansLast);
    setDrilldownPath(pathSansLast);
    setActiveMenu(toMenuId);
    setActiveItemId(lastPath);
  };

  const setHeight = (menuId: string, height: number) => {
    // FIXME: look for a better way to avoid test crashing because of this method
    if (process.env.NODE_ENV === "test") return;

    if (
      menuHeights[menuId] === undefined ||
      (menuId !== rootId && menuHeights[menuId] !== height)
    ) {
      setMenuHeights({ ...menuHeights, [menuId]: height });
    }
  };

  const baseToggleProps = { ref: toggleRef, onClick: toggle, isExpanded: isOpen };

  return (
    <MenuContainer
      isOpen={isOpen}
      onOpenChange={onOpenChange}
      toggleRef={toggleRef}
      popperProps={{ direction: "down", enableFlip: false, ...menuProps.popperProps }}
      toggle={
        React.isValidElement(customToggle) ? (
          React.cloneElement(customToggle as React.ReactElement, baseToggleProps)
        ) : (
          <MenuToggle {...baseToggleProps} {...toggleProps}>
            {children}
          </MenuToggle>
        )
      }
      menuRef={menuRef}
      menu={
        <Menu
          id={rootId}
          containsDrilldown
          onDrillIn={drillIn}
          onDrillOut={drillOut}
          onGetMenuHeight={setHeight}
          activeMenu={activeMenu}
          activeItemId={activeItemId}
          drilledInMenus={menuDrilledIn}
          drilldownItemPath={drilldownPath}
          ref={menuRef}
          onClick={() => menuProps.closeOnClick && setIsOpen(false)}
        >
          <MenuContent menuHeight={`${menuHeights[activeMenu]}px`}>
            <MenuList
              aria-label={menuProps["aria-label"]}
              aria-labelledby={menuProps["aria-labelledby"]}
            >
              {items}
            </MenuList>
          </MenuContent>
        </Menu>
      }
    />
  );
}
MenuButton.Item = MenuButtonItem;
