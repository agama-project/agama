//! # D-Bus interface proxy for: `org.freedesktop.locale1`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/locale1' from service 'org.freedesktop.locale1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.freedesktop.locale1",
    default_service = "org.freedesktop.locale1",
    default_path = "/org/freedesktop/locale1"
)]
pub trait Locale1 {
    /// SetLocale method
    fn set_locale(&self, locale: &[&str], interactive: bool) -> zbus::Result<()>;

    /// SetVConsoleKeyboard method
    #[zbus(name = "SetVConsoleKeyboard")]
    fn set_vconsole_keyboard(
        &self,
        keymap: &str,
        keymap_toggle: &str,
        convert: bool,
        interactive: bool,
    ) -> zbus::Result<()>;

    /// SetX11Keyboard method
    #[zbus(name = "SetX11Keyboard")]
    fn set_x11keyboard(
        &self,
        layout: &str,
        model: &str,
        variant: &str,
        options: &str,
        convert: bool,
        interactive: bool,
    ) -> zbus::Result<()>;

    /// Locale property
    #[zbus(property)]
    fn locale(&self) -> zbus::Result<Vec<String>>;

    /// VConsoleKeymap property
    #[zbus(property, name = "VConsoleKeymap")]
    fn vconsole_keymap(&self) -> zbus::Result<String>;

    /// VConsoleKeymapToggle property
    #[zbus(property, name = "VConsoleKeymapToggle")]
    fn vconsole_keymap_toggle(&self) -> zbus::Result<String>;

    /// X11Layout property
    #[zbus(property, name = "X11Layout")]
    fn x11layout(&self) -> zbus::Result<String>;

    /// X11Model property
    #[zbus(property, name = "X11Model")]
    fn x11model(&self) -> zbus::Result<String>;

    /// X11Options property
    #[zbus(property, name = "X11Options")]
    fn x11options(&self) -> zbus::Result<String>;

    /// X11Variant property
    #[zbus(property, name = "X11Variant")]
    fn x11variant(&self) -> zbus::Result<String>;
}
