// Copyright (c) [2024] SUSE LLC
//
// All Rights Reserved.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, contact SUSE LLC.
//
// To contact SUSE LLC about this file by physical or electronic mail, you may
// find current contact information at www.suse.com.

//! D-Bus interface proxies for: `org.opensuse.Agama*.**.*`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.`.
use zbus::proxy;

#[proxy(
    interface = "org.opensuse.Agama1.Network.Devices",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network/devices"
)]
trait Devices {
    /// GetDevices method
    fn get_devices(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Device",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network/devices/1"
)]
trait Device {
    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;
    /// Type property
    #[zbus(property)]
    fn type_(&self) -> zbus::Result<u8>;
    /// State property
    #[zbus(property)]
    fn state(&self) -> zbus::Result<u8>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connections",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network/connections"
)]
trait Connections {
    /// AddConnection method
    fn add_connection(&self, id: &str, ty: u8) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Apply method
    fn apply(&self) -> zbus::Result<()>;

    /// GetConnection method
    fn get_connection(&self, uuid: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetConnectionById method
    fn get_connection_by_id(&self, id: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetConnections method
    fn get_connections(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// RemoveConnection method
    fn remove_connection(&self, uuid: &str) -> zbus::Result<()>;

    /// ConnectionAdded signal
    #[zbus(signal)]
    fn connection_added(&self, id: &str, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connection.Wireless",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network"
)]
trait Wireless {
    /// Returns the operating mode of the Wireless device
    ///
    /// Possible values are 'unknown', 'adhoc', 'infrastructure', 'ap' or 'mesh'
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_mode(&self, value: &str) -> zbus::Result<()>;

    /// Password property
    #[zbus(property)]
    fn password(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_password(&self, value: &str) -> zbus::Result<()>;

    /// SSID property
    #[zbus(property, name = "SSID")]
    fn ssid(&self) -> zbus::Result<Vec<u8>>;
    #[zbus(property, name = "SSID")]
    fn set_ssid(&self, value: &[u8]) -> zbus::Result<()>;

    /// Wireless Security property
    ///
    /// Possible values are 'none', 'owe', 'ieee8021x', 'wpa-psk', 'sae',
    ///     'wpa-eap', 'wpa-eap-suite-b-192'
    #[zbus(property)]
    fn security(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_security(&self, value: &str) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connection",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network"
)]
trait Connection {
    /// Id property
    #[zbus(property)]
    fn id(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn interface(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_interface(&self, interface: &str) -> zbus::Result<()>;
    #[zbus(property)]
    fn mac_address(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_mac_address(&self, mac_address: &str) -> zbus::Result<()>;
    #[zbus(property)]
    fn mtu(&self) -> zbus::Result<u32>;
    #[zbus(property)]
    fn set_mtu(&self, mtu: u32) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connection.IP",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network/connections/0"
)]
trait IP {
    /// Addresses property
    #[zbus(property)]
    fn addresses(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_addresses(&self, value: &[&str]) -> zbus::Result<()>;

    /// Gateway4 property
    #[zbus(property)]
    fn gateway4(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_gateway4(&self, value: &str) -> zbus::Result<()>;

    /// Gateway6 property
    #[zbus(property)]
    fn gateway6(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_gateway6(&self, value: &str) -> zbus::Result<()>;

    /// Method4 property
    #[zbus(property)]
    fn method4(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_method4(&self, value: &str) -> zbus::Result<()>;

    /// Method6 property
    #[zbus(property)]
    fn method6(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_method6(&self, value: &str) -> zbus::Result<()>;

    /// Nameservers property
    #[zbus(property)]
    fn nameservers(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_nameservers(&self, value: &[&str]) -> zbus::Result<()>;

    /// DNS searchlist property
    #[zbus(property)]
    fn dns_searchlist(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_dns_searchlist(&self, value: &[&str]) -> zbus::Result<()>;

    /// Ignore auto DNS property
    #[zbus(property)]
    fn ignore_auto_dns(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_ignore_auto_dns(&self, value: bool) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connection.Match",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network"
)]
trait Match {
    /// Driver property
    #[zbus(property)]
    fn driver(&self) -> zbus::Result<Vec<String>>;
    fn set_driver(&self, value: &[&str]) -> zbus::Result<()>;

    /// Interface property
    #[zbus(property)]
    fn interface(&self) -> zbus::Result<Vec<String>>;
    fn set_interface(&self, value: &[&str]) -> zbus::Result<()>;

    /// Path property
    #[zbus(property)]
    fn path(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_path(&self, value: &[&str]) -> zbus::Result<()>;

    /// Path property
    #[zbus(property)]
    fn kernel(&self) -> zbus::Result<Vec<String>>;
    fn set_kernel(&self, value: &[&str]) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Network.Connection.Bond",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Network"
)]
trait Bond {
    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_mode(&self, value: &str) -> zbus::Result<()>;

    /// Ports property
    #[zbus(property)]
    fn options(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_options(&self, value: &str) -> zbus::Result<()>;

    /// Ports property
    #[zbus(property)]
    fn ports(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_ports(&self, value: &[&str]) -> zbus::Result<()>;
}
