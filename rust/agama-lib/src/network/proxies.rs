//! D-Bus interface proxies for: `org.opensuse.Agama*.**.*`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.`.
use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.opensuse.Agama.Network1.Connections",
    default_service = "org.opensuse.Agama.Network1",
    default_path = "/org/opensuse/Agama/Network1/connections"
)]
trait Connections {
    /// Add a new network connection.
    ///
    /// `name`: connection name.
    /// `ty`: connection type.
    fn add_connection(&self, name: &str, ty: u8) -> zbus::Result<()>;

    /// Apply method
    fn apply(&self) -> zbus::Result<()>;

    /// Gets a connection D-Bus path by its ID
    ///
    /// * `id`: connection ID.
    fn get_connection(&self, id: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetConnections method
    fn get_connections(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// RemoveConnection method
    fn remove_connection(&self, uuid: &str) -> zbus::Result<()>;
}

#[dbus_proxy(
    interface = "org.opensuse.Agama.Network1.Connection.Wireless",
    default_service = "org.opensuse.Agama.Network1",
    default_path = "/org/opensuse/Agama/Network1"
)]
trait Wireless {
    /// Returns the operating mode of the Wireless device
    ///
    /// Possible values are 'unknown', 'adhoc', 'infrastructure', 'ap' or 'mesh'
    #[dbus_proxy(property)]
    fn mode(&self) -> zbus::Result<String>;
    fn set_mode(&self, value: &str) -> zbus::Result<()>;

    /// Password property
    #[dbus_proxy(property)]
    fn password(&self) -> zbus::Result<String>;
    fn set_password(&self, value: &str) -> zbus::Result<()>;

    /// SSID property
    #[dbus_proxy(property, name = "SSID")]
    fn ssid(&self) -> zbus::Result<Vec<u8>>;
    fn set_ssid(&self, value: &[u8]) -> zbus::Result<()>;

    /// Wireless Security property
    ///
    /// Possible values are 'none', 'owe', 'ieee8021x', 'wpa-psk', 'sae',
    ///     'wpa-eap', 'wpa-eap-suite-b192'
    #[dbus_proxy(property)]
    fn security(&self) -> zbus::Result<String>;
    fn set_security(&self, value: &str) -> zbus::Result<()>;
}

#[dbus_proxy(
    interface = "org.opensuse.Agama.Network1.Connection",
    default_service = "org.opensuse.Agama.Network1",
    default_path = "/org/opensuse/Agama/Network1"
)]
trait Connection {
    /// Id property
    #[dbus_proxy(property)]
    fn id(&self) -> zbus::Result<String>;

    /// UUID property
    #[dbus_proxy(property, name = "UUID")]
    fn uuid(&self) -> zbus::Result<String>;
}

#[dbus_proxy(
    interface = "org.opensuse.Agama.Network1.Connection.IPv4",
    default_service = "org.opensuse.Agama.Network1",
    default_path = "/org/opensuse/Agama/Network1"
)]
trait IPv4 {
    /// Addresses property
    ///
    /// By now just an array of IPv4 addresses in string format
    #[dbus_proxy(property)]
    fn addresses(&self) -> zbus::Result<Vec<String>>;
    #[dbus_proxy(property)]
    fn set_addresses(&self, value: &[&str]) -> zbus::Result<()>;

    /// Gateway property
    #[dbus_proxy(property)]
    fn gateway(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_gateway(&self, value: &str) -> zbus::Result<()>;

    /// Method property
    #[dbus_proxy(property)]
    fn method(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_method(&self, value: &str) -> zbus::Result<()>;

    /// Nameservers property
    ///
    /// By now just an array of IPv4 addresses in string format
    #[dbus_proxy(property)]
    fn nameservers(&self) -> zbus::Result<Vec<String>>;
    #[dbus_proxy(property)]
    fn set_nameservers(&self, value: &[&str]) -> zbus::Result<()>;
}
